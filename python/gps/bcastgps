#!/usr/bin/env python
# -*- coding: utf-8 -*-
##
## (cc) 2015 Luis Rodil-Fernandez <root@derfunke.net>
CLII = """
Read GPS information from a Grove GPS module and broadcast data via MQTT protocol
on the 'gps' topic.

Usage:
  bcastgps [--mqtt-host=<mqtthost>] [--mqtt-port=<mqttport>] [--serial=<port>] [--bauds=<bauds>] [--nmea=<filename>]

Options:
  -h --help             Show this screen.
  --serial=<port>       Serial port of GPS sensor [default: /dev/ttyAMA0]
  --bauds=<bauds>       Data rate of serial communication [default: 9600]
  --nmea=<filename>     File where GPS NMEA message log will be saved, can be used to convert to GPX track data.
"""
import serial, time
import math
#import RPi.GPIO as GPIO
import struct
import sys, os
import paho.mqtt.client as mqtt
import pynmea2 as nmea
from docopt import docopt
import logging
import json

MQTT_TOPIC = "kinetoscan/gps"

class GPS:
    def __init__(self, port, baudrate):
        logging.info("Opening GPS reader on {0} with data rate {1}".format(port, baudrate))

        try:
            self.device = serial.Serial(port, baudrate, timeout = 0)
            time.sleep(0.2)
            self.device.flush()
        except serial.SerialException:
            logging.error("(!!!) Couldn't open serial port, check that I have read access to {0}".format(port))
            sys.exit(1)

        # by default we do not create a GPX file
        self.mqttc = None
        self.nmealog = False

    def on_connect(self, mosq, obj, rc):
        logging.info("rc: "+str(rc))

    def on_message(self, mosq, obj, msg):
        sticks[0].set_color(hex="#"+str(msg.payload))
        logging.info(msg.topic+" "+str(msg.payload))

    def on_publish(self, mosq, obj, mid):
        logging.info("mid: "+str(mid))

    def on_subscribe(self, mosq, obj, mid, granted_qos):
        logging.info("Subscribed: "+str(mid)+" "+str(granted_qos))

    def on_log(self, mosq, obj, level, string):
        logging.info(string)

    def mqtt_init(self, mqtthost, mqttport):
        # generate a unique ID for this client
        thispid = os.getpid()
        uid = "kinetoscan_beta_"+str(thispid)
        logging.info("Mosquitto ID {0}".format(uid))
        self.mqttc = mqtt.Client( uid )
        self.mqttc.on_message = self.on_message
        self.mqttc.on_connect = self.on_connect
        self.mqttc.on_publish = self.on_publish
        self.mqttc.on_subscribe = self.on_subscribe
        logging.info("Connecting to mosquitto {0}:{1}".format(mqtthost, mqttport))
        self.mqttc.connect(mqtthost, mqttport, 60)
        self.mqttc.subscribe(MQTT_TOPIC, 0)

    def nmea_log(self, fn):
        self.nmealog = True
        self.nmeafilename = fn

    def nmea_to_json(self, msg):
        retval = {
            'timestamp' : msg.timestamp.isoformat(),
            'lat' : msg.lat,
            'lat_dir' : msg.lat_dir,
            'lon' : msg.lon,
            'lon_dir' : msg.lon_dir,
            'gps_qual' : msg.gps_qual,
            'num_sats' : msg.num_sats,
            'horizontal_dil' : msg.horizontal_dil,
            'altitude' : msg.altitude,
            'altitude_units' : msg.altitude_units,
            'geo_sep' : msg.geo_sep,
            'geo_sep_units' : msg.geo_sep_units,
            'age_gps_data' : msg.age_gps_data,
            'ref_station_id' : msg.ref_station_id
        }
        return json.dumps(retval)

    def close(self):
        if self.mqttc:
            self.mqttc.disconnect()

    def update(self):
        line = self.device.readline()
        #line = "$GPGGA,001933.799,,,,,0,0,,,M,,M,,*47"
        gpsmsg = nmea.parse( line ) # parse using library
        logging.debug("parsed entry {0}".format(line) )
        logging.debug("-> as: {0}".format(gpsmsg) )

        # from pprint import pprint
        # pprint( json.dumps(gpsmsg) )

        # broadcast parsed message on mqtt
        if self.mqttc and gpsmsg:
            js = self.nmea_to_json(gpsmsg)
            self.mqttc.publish(MQTT_TOPIC, js)

        # save parsed line onto nmea file
        if self.nmealog:
            logging.debug("Writing GPS line to NMEA log {0}".format(self.nmeafilename))
            with open(self.nmeafilename, 'a+') as f:
                f.write(line)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    args = docopt(CLII)

    # from pprint import pprint
    # pprint(args)

    gps = GPS(args['--serial'], int(args['--bauds']))
    if '--gpx' in args:
        logging.info("Saving NMEA file with path {0}".format(args['--nmea']))
        gps.gpx_log( args['--nmea'] )

    if ('--mqtt-host') in args and ('--mqtt-port' in args):
        gps.mqtt_init(args['--mqtt-host'], args['--mqtt-port'])

    try:
        while True:
            gps.update()
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("Good bye!")
        gps.close()
        sys.exit(0)
