#!/usr/bin/env python
# -*- coding: utf-8 -*-
##
## (cc) 2015 Luis Rodil-Fernandez <root@derfunke.net>
CLII = """
Get motion information from the kinetoscan sensors and broadcast data via MQTT protocol.

Usage:
  bcastgps [--mqtt-host=<mqtthost>] [--mqtt-port=<mqttport>] [--serial=<port>] [--bauds=<bauds>] [--nmea=<filename>]

Options:
  -h --help             Show this screen.
  --serial=<port>       Serial port of GPS sensor [default: /dev/ttyAMA0]
  --bauds=<bauds>       Data rate of serial communication [default: 9600]
  --nmea=<filename>     File where GPS NMEA message log will be saved, can be used to convert to GPX track data.
"""
import serial, time
import math
#import RPi.GPIO as GPIO
import struct
import sys, os
import paho.mqtt.client as mqtt
from docopt import docopt
import logging
import json

from sensors.gps import GPS
import sensors.mpu9250 as mpu
from sensors.bmp180 import BMP085
from mqtt import MQTT
from imu.fusion import Fusion

MQTT_GPS_TOPIC = "kinetoscan/gps"
MQTT_IMU_TOPIC = "kinetoscan/imu"
MQTT_BAR_TOPIC = "kinetoscan/barometer"
MQTT_FUS_TOPIC = "kinetoscan/heading"

# To calculate altitude based on an estimated mean sea level pressure
# (1013.25 hPa) call the function as follows, but this won't be very accurate
# altitude = bmp.readAltitude()

# To specify a more accurate altitude, enter the correct mean sea level
# pressure level.  For example, if the current pressure level is 1023.50 hPa
# enter 102350 since we include two decimal places in the integer value
MEAN_SEA_LEVEL_PRESSURE = 101560

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    args = docopt(CLII)

    # from pprint import pprint
    # pprint(args)

    # generate a unique ID for this client
    thispid = os.getpid()
    uid = "kinetoscan_beta_"+str(thispid)

    # start mosquitto client
    queue = MQTT(uid)

    mqtthost = "127.0.0.1"
    mqttport = 1883
    if args['--mqtt-host'] and args['--mqtt-port']:
        mqtthost = args['--mqtt-host']
        mqttport = args['--mqtt-port']

    queue.connect(mqtthost, mqttport)

    # initialize GPS sensor
    gps = GPS(args['--serial'], int(args['--bauds']))
    if '--gpx' in args:
        logging.info("Saving NMEA file with path {0}".format(args['--nmea']))
        gps.gpx_log( args['--nmea'] )

    # initialize barometric sensor
    bmp = BMP085(0x77, 1)
    # To specify a different operating mode, uncomment one of the following:
    # bmp = BMP085(0x77, 0)  # ULTRALOWPOWER Mode
    # bmp = BMP085(0x77, 1)  # STANDARD Mode
    # bmp = BMP085(0x77, 2)  # HIRES Mode
    # bmp = BMP085(0x77, 3)  # ULTRAHIRES Mode

    # initialize IMU
    sensor = mpu.mpu9250() # default pin is AIN0
    fuse = Fusion()

    try:
        while True:
            # update GPS reading
            rgps = gps.update()
            if rgps:
                queue.mqttc.publish(MQTT_GPS_TOPIC, json.dumps( rgps ))

            # update barometer reading
            temp = bmp.readTemperature() # C
            pressure = bmp.readPressure() / 100 # hPa
            altitude = bmp.readAltitude(MEAN_SEA_LEVEL_PRESSURE) # m
            queue.mqttc.publish(MQTT_BAR_TOPIC, json.dumps( { 'temperature' : temp, 'pressure' : pressure, 'altitude' : altitude } ) )

            # broadcast reading of IMU sensor
            rimu = sensor.read_all()
            queue.mqttc.publish(MQTT_IMU_TOPIC, json.dumps( rimu ) )

            # calculate and broadcast heading vector from IMU readings
            # fuse.update(accel, gyro, mag)
            # queue.mqttc.publish(MQTT_FUS_TOPIC, json.dumps( {'heading' : fuse.heading, 'pitch' : fuse.pitch, 'roll' : fuse.roll} ) )

            time.sleep(0.1)
    except KeyboardInterrupt:
        print("Good bye!")
        gps.close()
        if queue:
            queue.mqttc.disconnect()

        sys.exit(0)
